{"version":3,"sources":["components/FormDialog.tsx","components/Question.tsx","components/QuestionsForm.tsx","components/AlertDialog.tsx","components/Header.tsx","AppConst.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["FormDialog","title","onChangeTextField","formSwitcher","onChangeFormSwitcher","saveTitle","addQuestion","onChangeAlertSwitcher","handleClose","onOkClick","isTitleCorrect","test","length","trim","Dialog","open","onClose","aria-labelledby","DialogContent","DialogContentText","dialogFormText","createDialogFormText","TextField","value","onChange","e","currentTarget","autoFocus","margin","id","fullWidth","onKeyPress","key","DialogActions","Button","onClick","color","Question","questionIndex","answers","changeAnswerStatus","map","answer","answerIndex","Checkbox","checked","onChangeAnswerStatus","size","inputProps","QuestionsForm","questions","sendAnswers","question","variant","AlertDialog","alertSwitcher","setNumbersOfWrongQuestions","numbersOfWrongQuestions","aria-describedby","ReactHtmlParser","alertDialogText","n","join","createAlertDialogText","useStyles","makeStyles","theme","createStyles","root","spacing","defaultProps","children","Header","numberOfQuestions","handleAddQuestion","disabledButtons","startTest","classes","className","Badge","badgeContent","disabled","initialNewQuestion","uuidv1","correctAnswers","initialQuestions","App","useState","newQuestion","setNewQuestion","setQuestions","setFormSwitcher","setTitle","setDisabledButtons","setAlertSwitcher","styles","copyNewQuestion","copyAnswers","arrayOfStrings","match","arrayOfNumbers","elem","Number","doesTheQuestionHaveCheckedAnswers","wrongQuestions","reduce","acc","numberOfUncheckedAnswers","i","includes","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ddcb2922.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\nimport {FormDialogPropsType, SwitcherFormType} from \"../AppTypes\";\r\n\r\nexport const FormDialog: React.FC<FormDialogPropsType> = ({\r\n                                                              title,\r\n                                                              onChangeTextField,\r\n                                                              formSwitcher,\r\n                                                              onChangeFormSwitcher,\r\n                                                              saveTitle,\r\n                                                              addQuestion,\r\n                                                              onChangeAlertSwitcher\r\n                                                          }) => {\r\n\r\n    const handleClose = (): void => {\r\n        onChangeFormSwitcher(0);\r\n    };\r\n\r\n    const onCancelClick = (): void => {\r\n        handleClose();\r\n        onChangeTextField('');\r\n    }\r\n\r\n    const createDialogFormText = () => {\r\n        let dialogFormText: string = '';\r\n\r\n        switch (formSwitcher) {\r\n            case 0:\r\n                dialogFormText = '';\r\n                break;\r\n            case 1:\r\n                dialogFormText = 'Введите текст вопроса';\r\n                break;\r\n            case 6:\r\n                dialogFormText = 'Введите номера правильных ответов через запятую. Нумерация начинается с 1';\r\n                break;\r\n            default:\r\n                dialogFormText = `Введите текст ${formSwitcher - 1} варианта ответа`;\r\n                break;\r\n        } return dialogFormText;\r\n    }\r\n\r\n    const onEnterPressHandler = (e: KeyboardEvent<HTMLInputElement>): void => {\r\n        e.key === 'Enter' && onOkClick();\r\n    }\r\n\r\n    const onOkClick = (): void => {\r\n        let isTitleCorrect: boolean = true;\r\n\r\n        if (!/^[1-4](?:,[1-4]){0,3}$/g.test(title) || /(\\d).*\\1/.test(title)) { //The first part of the logical expression is a check that only numbers 1-4 and commas can be entered. Also, all digits must be separated by a comma, the first and last characters are a digit, in total no more than 4 digits can be entered. The second part is to check that no identical numbers have been entered.\r\n            isTitleCorrect = false;\r\n        }\r\n\r\n        if (title.length && formSwitcher === 6 && !isTitleCorrect) {\r\n            onChangeAlertSwitcher(6);\r\n            onChangeTextField('');\r\n            return\r\n        }\r\n\r\n        if (!title.trim().length) { //System messages are called depending on which field was not entered.\r\n            switch (formSwitcher) {\r\n                case 1:\r\n                    onChangeAlertSwitcher(1); //System message for the case when the question text was not entered\r\n                    break;\r\n                case 6:\r\n                    onChangeAlertSwitcher(3); //System message for the case when the correct answer options were not entered\r\n                    break;\r\n                default:\r\n                    onChangeAlertSwitcher(2); //System message for the case when the text of the answer option was not entered.\r\n                    break;\r\n            } onChangeTextField('');\r\n            return;\r\n        }\r\n\r\n        if (formSwitcher === 6) { //The actions of the program after clicking the OK button in the dialog box for entering the correct answer options in case of correct input.\r\n            handleClose();\r\n            addQuestion();\r\n            onChangeTextField('');\r\n        } else {\r\n            saveTitle();\r\n            onChangeFormSwitcher(formSwitcher + 1 as SwitcherFormType);\r\n        }\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        onChangeTextField(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={formSwitcher !== 0} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {createDialogFormText()}\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        value={title}\r\n                        onChange={onChange}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        fullWidth\r\n                        onKeyPress={onEnterPressHandler}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onOkClick} color=\"primary\">\r\n                        OK\r\n                    </Button>\r\n                    <Button onClick={onCancelClick} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport {AnswersType, QuestionPropsType} from \"../AppTypes\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\n\r\nexport const Question: React.FC<QuestionPropsType> = ({\r\n                                                          questionIndex,\r\n                                                          title,\r\n                                                          answers,\r\n                                                          changeAnswerStatus\r\n                                                      }) => {\r\n\r\n    const onChangeAnswerStatus = (answerIndex: number, checked: boolean): void => {\r\n        changeAnswerStatus(answerIndex, questionIndex, checked);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <label><b>{title}</b></label>\r\n            </div>\r\n            <ul>\r\n                {answers.map((answer: AnswersType, answerIndex: number) => <li key={answer.id}>\r\n                        <Checkbox\r\n                            checked={answer.checked}\r\n                            onChange={() => onChangeAnswerStatus(answerIndex, answer.checked)}\r\n                            size=\"small\"\r\n                            inputProps={{'aria-label': 'checkbox with small size'}}\r\n                            color=\"primary\"\r\n                        />\r\n                    <label>{answer.title}</label>\r\n                    </li>\r\n                )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {Question} from \"./Question\";\r\nimport {QuestionsFormPropsType, QuestionsType} from \"../AppTypes\";\r\n\r\nexport const QuestionsForm: React.FC<QuestionsFormPropsType> = ({\r\n                                                                    questions,\r\n                                                                    changeAnswerStatus,\r\n                                                                    sendAnswers\r\n                                                                }) => {\r\n    const onClickHandler = (): void => {\r\n        sendAnswers();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {questions.map((question:QuestionsType, questionIndex: number) => {\r\n\r\n                return (\r\n                    <Question key={question.id}\r\n                              questionIndex={questionIndex}\r\n                              title={question.title}\r\n                              answers={question.answers}\r\n                              changeAnswerStatus={changeAnswerStatus}\r\n                    />)\r\n            })}\r\n            <Button variant=\"contained\"\r\n                    onClick={onClickHandler}>\r\n                Отправить\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nimport {AlertDialogPropsType} from \"../AppTypes\";\r\n\r\nexport const AlertDialog: React.FC<AlertDialogPropsType> = ({\r\n                                                                alertSwitcher,\r\n                                                                onChangeAlertSwitcher,\r\n                                                                setNumbersOfWrongQuestions,\r\n                                                                formSwitcher,\r\n                                                                onChangeFormSwitcher,\r\n                                                                numbersOfWrongQuestions,\r\n                                                                questions\r\n                                                            }) => {\r\n    const onOkClick = (): void => {\r\n        onChangeAlertSwitcher(0);\r\n        onChangeFormSwitcher(0);\r\n        setNumbersOfWrongQuestions([]);\r\n    };\r\n\r\n   const createAlertDialogText = (): string => {\r\n       let alertDialogText: string = '';\r\n\r\n       switch (alertSwitcher) {\r\n           case 1:\r\n               alertDialogText = 'Вы не ввели текст вопроса. Попробуйте добавить вопрос заново.';\r\n               break;\r\n           case 2:\r\n               alertDialogText = `Вы не ввели текст ${formSwitcher - 1} варианта ответа. Попробуйте добавить вопрос заново.`;\r\n               break;\r\n           case 3:\r\n               alertDialogText = 'Вы не ввели правильные варианты ответов. Попробуйте добавить вопрос заново.';\r\n               break;\r\n           case 4:\r\n               alertDialogText = 'Все вопросы должны иметь хотя бы один выбранный вариант ответа. Проверьте правильность заполнения.';\r\n               break;\r\n           case 5:\r\n               alertDialogText = `Ваш результат ${questions.length} из ${questions.length}. Вы молодец!`;\r\n               break;\r\n           case 6:\r\n               alertDialogText = 'Поле может содержать только уникальные цифры 1, 2, 3, 4, разделенные запятой. Попробуйте добавить вопрос заново.';\r\n               break;\r\n           case 7:\r\n               alertDialogText = `<b>Вы неправильно ответили на вопросы:</b></br></br>\r\n${numbersOfWrongQuestions.map(n => `${questions[n - 1].title}</br>`).join('')}\r\n</br><b>Ваш результат ${questions.length - numbersOfWrongQuestions.length} из ${questions.length}.</b>`\r\n               break;\r\n\r\n       }\r\n       return alertDialogText;\r\n   }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={alertSwitcher !== 0}\r\n                onClose={onOkClick}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\">\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {ReactHtmlParser(createAlertDialogText())}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onOkClick} color=\"primary\" autoFocus>\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport QuestionAnswerTwoToneIcon from '@material-ui/icons/QuestionAnswerTwoTone';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {HeaderPropsType} from \"../AppTypes\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nconst defaultProps = {\r\n    color: 'secondary' as 'secondary',\r\n    children: <QuestionAnswerTwoToneIcon/>,\r\n};\r\n\r\nexport const Header: React.FC<HeaderPropsType> = ({\r\n                                                        numberOfQuestions,\r\n                                                        handleAddQuestion,\r\n                                                        disabledButtons,\r\n                                                        startTest\r\n                                                    }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Badge badgeContent={numberOfQuestions} {...defaultProps} />\r\n            <Button variant=\"contained\"\r\n                    onClick={handleAddQuestion}\r\n                    disabled={disabledButtons}>\r\n                Добавить вопрос\r\n            </Button>\r\n            <Button variant=\"contained\"\r\n                    disabled={disabledButtons}\r\n                    onClick={startTest}>\r\n                Начать тест\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import {v1 as uuidv1} from \"uuid\";\r\n\r\nexport const initialNewQuestion = {\r\n    id: uuidv1(),\r\n    title: '',\r\n    answers: [\r\n        {id: uuidv1(), title: '', checked: false},\r\n        {id: uuidv1(), title: '', checked: false},\r\n        {id: uuidv1(), title: '', checked: false},\r\n        {id: uuidv1(), title: '', checked: false}\r\n    ],\r\n    correctAnswers: []\r\n};\r\nexport const initialQuestions = [\r\n    {\r\n        id: uuidv1(),\r\n        title: '1. Что из перечисленного не является языком программирования?',\r\n        answers: [\r\n            {id: uuidv1(), title: 'HTML', checked: false},\r\n            {id: uuidv1(), title: 'Java', checked: false},\r\n            {id: uuidv1(), title: 'Python', checked: false},\r\n            {id: uuidv1(), title: 'DevOps', checked: false}\r\n        ],\r\n        correctAnswers: [1, 4]\r\n    },\r\n    {\r\n        id: uuidv1(),\r\n        title: '2. Какие из перечисленных видов тестирования могут быть автоматизированы?',\r\n        answers: [\r\n            {id: uuidv1(), title: 'UI тестирование', checked: false},\r\n            {id: uuidv1(), title: 'Юзабилити тестирование', checked: false},\r\n            {id: uuidv1(), title: 'Тестирование совместимости', checked: false},\r\n            {id: uuidv1(), title: 'Unit тестирование', checked: false}\r\n        ],\r\n        correctAnswers: [1, 3, 4]\r\n    },\r\n    {\r\n        id: uuidv1(),\r\n        title: '3. Выберите вариант, который соответствует следующему предложению: \"Известно, что грымзик обязательно или полосат, или рогат, или то и другое вместе\"',\r\n        answers: [\r\n            {id: uuidv1(), title: 'Грымзик не может быть безрогим', checked: false},\r\n            {id: uuidv1(), title: 'Грымзик не может быть однотонным и безрогим одновременно', checked: false},\r\n            {id: uuidv1(), title: 'Грымзик не может быть полосатым и безрогим одновременно', checked: false},\r\n            {id: uuidv1(), title: 'Грымзик не может быть однотонным и рогатым одновременно', checked: false}\r\n        ],\r\n        correctAnswers: [2]\r\n    },\r\n    {\r\n        id: uuidv1(),\r\n        title: '4. Выберите типы алгоритмов, которых не существует',\r\n        answers: [\r\n            {id: uuidv1(), title: 'Алгоритм с ветвлением', checked: false},\r\n            {id: uuidv1(), title: 'Циклический безусловный', checked: false},\r\n            {id: uuidv1(), title: 'Циклический с параметром', checked: false},\r\n            {id: uuidv1(), title: 'Алгоритм с углублением', checked: false}\r\n        ],\r\n        correctAnswers: [2, 4]\r\n    },\r\n    {\r\n        id: uuidv1(),\r\n        title: '5. Какая (какие) из следующих конструкций используется (используются) для ветвления?',\r\n        answers: [\r\n            {id: uuidv1(), title: 'switch case', checked: false},\r\n            {id: uuidv1(), title: 'if else', checked: false},\r\n            {id: uuidv1(), title: 'do while', checked: false},\r\n            {id: uuidv1(), title: 'for', checked: false}\r\n        ],\r\n        correctAnswers: [1, 2]\r\n    },\r\n];","import React, {useState} from 'react';\n\nimport {FormDialog} from \"./components/FormDialog\";\nimport {QuestionsForm} from \"./components/QuestionsForm\";\nimport {AlertDialog} from \"./components/AlertDialog\";\nimport styles from './App.module.css';\nimport {AlertSwitcherType, AnswersType, QuestionsType, SwitcherFormType} from \"./AppTypes\";\nimport {Header} from \"./components/Header\";\nimport {initialNewQuestion, initialQuestions} from \"./AppConst\";\n\nconst App: React.FC = () => {\n    const [newQuestion, setNewQuestion] = useState<QuestionsType>(initialNewQuestion); //Object for temporary storage of all entered data to create a new question\n    const [questions, setQuestions] = useState<QuestionsType[]>(initialQuestions); //Array of all standard and added questions\n    const [formSwitcher, setFormSwitcher] = useState<SwitcherFormType>(0); //Dialog box switcher\n    const [title, setTitle] = useState<string>(''); //Variable for temporary storage of data entered in the dialog box\n    const [disabledButtons, setDisabledButtons] = useState<boolean>(false); //Disabling the \"Добавить вопрос\" and \"Начать тест\" buttons\n    const [alertSwitcher, setAlertSwitcher] = useState<AlertSwitcherType>(0); //System message switch\n    const [numbersOfWrongQuestions, setNumbersOfWrongQuestions] = useState<number[]>([]); //Array of wrong answer numbers\n\n    const handleAddQuestion = (): void => {\n        setFormSwitcher(1);\n    }\n\n    const saveTitle = (): void => {\n        let copyNewQuestion: QuestionsType;\n\n        if (formSwitcher === 1) {\n            copyNewQuestion = {...newQuestion, title: `${questions.length + 1}. ${title}`}; //A title is assigned to a new question.\n        } else {\n            const copyAnswers: AnswersType[] = [...newQuestion.answers]; //А title is assigned to one of the answer.\n            copyAnswers[formSwitcher - 2] = {\n                ...copyAnswers[formSwitcher - 2],\n                title: title\n            };\n            copyNewQuestion = {...newQuestion,\n                answers: [...copyAnswers]\n            };\n        }\n        setNewQuestion(copyNewQuestion);\n        setTitle(''); //The title is cleared so that there is an empty input in the dialog form.\n    }\n\n    const addQuestion = (): void => { //This function assigns an array of correct answer numbers to the \"correctAnswers\" field of a new question, and then adds the new question to the array of questions.\n        const arrayOfStrings: string[] | null = title.match(/\\d/g); //Title is the value that was entered in the window for entering the numbers of correct answers.\n        if (arrayOfStrings && arrayOfStrings.length) {\n            const arrayOfNumbers: number[] = arrayOfStrings.map(elem => Number(elem));\n            const copyNewQuestion: QuestionsType = {...newQuestion, correctAnswers: arrayOfNumbers};\n            setQuestions([...questions, copyNewQuestion]);\n        }\n        setNewQuestion(initialNewQuestion);\n    }\n\n    const changeAnswerStatus = (answerIndex: number, questionIndex: number, value: boolean): void => {\n        questions[questionIndex].answers[answerIndex].checked = !value;\n        setQuestions([...questions]);\n    }\n\n    const startTest = (): void => {\n        setDisabledButtons(true);\n    }\n\n    const sendAnswers = (): void => { //The function determines whether all questions have been answered, and also determines the questions to which incorrect answers are given, and depending on this, it calls system messages No. 4, 5, 7.\n        let doesTheQuestionHaveCheckedAnswers: boolean = true;\n\n        const wrongQuestions: number[] = questions.reduce((acc: number[], question: QuestionsType, questionIndex: number): number[] => {\n            let numberOfUncheckedAnswers: number = 0; //A variable that is assigned the number of unchecked answers.\n            for (let i = 0; i < question.answers.length; i++) {\n                !question.answers[i].checked && numberOfUncheckedAnswers++\n                if ((question.answers[i].checked && !question.correctAnswers.includes(i + 1)) || (!question.answers[i].checked && question.correctAnswers.includes(i + 1))) { //If the answer is marked, but it is not in the correct answers, then the question is counted as incorrect. Also, if the answer is not marked, but it is in the correct answers, then the question is again considered incorrect.\n                    !acc.includes(questionIndex + 1) && acc.push(questionIndex + 1); //If the question is not correct, then its number (starting from 1) is added to the array with serial numbers of incorrect questions.\n                }\n            }\n            if (numberOfUncheckedAnswers === 4) { //If all the answers to at least one question are unmarked, then system message No. 4 is called\n                setAlertSwitcher(4);\n                doesTheQuestionHaveCheckedAnswers = false;\n            }\n            return acc;\n        }, []);\n\n        if (doesTheQuestionHaveCheckedAnswers) {\n            !wrongQuestions.length ? setAlertSwitcher(5) : setAlertSwitcher(7);\n            setNumbersOfWrongQuestions(wrongQuestions);\n        }\n    }\n\n    return (\n        <div className={styles.App}>\n            <Header numberOfQuestions={questions.length}\n                    handleAddQuestion={handleAddQuestion}\n                    disabledButtons={disabledButtons}\n                    startTest={startTest}\n            />\n            <FormDialog title={title}\n                        onChangeTextField={setTitle}\n                        formSwitcher={formSwitcher}\n                        onChangeFormSwitcher={setFormSwitcher}\n                        saveTitle={saveTitle}\n                        addQuestion={addQuestion}\n                        onChangeAlertSwitcher={setAlertSwitcher}\n            />\n            <AlertDialog alertSwitcher={alertSwitcher}\n                         onChangeAlertSwitcher={setAlertSwitcher}\n                         setNumbersOfWrongQuestions={setNumbersOfWrongQuestions}\n                         formSwitcher={formSwitcher}\n                         onChangeFormSwitcher={setFormSwitcher}\n                         numbersOfWrongQuestions={numbersOfWrongQuestions}\n                         questions={questions}\n            />\n            {disabledButtons && <QuestionsForm questions={questions}\n                                               changeAnswerStatus={changeAnswerStatus}\n                                               sendAnswers={sendAnswers}\n            />}\n        </div>\n    )\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1E04H\",\"buttons\":\"App_buttons__10kLr\",\"button\":\"App_button__3dM0D\"};"],"sourceRoot":""}